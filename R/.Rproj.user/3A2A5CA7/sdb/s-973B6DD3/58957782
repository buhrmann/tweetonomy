{
    "contents" : "library(igraph)\nlibrary(networkD3)\nlibrary(tcltk)\nlibrary(rgl)\nlibrary(utils)\n\n# Graph from edge lists\ncolnames = c(\"from\", \"to\", \"weight\")\nedge_list = read.table(\"~/Code/tweetonomy/data/retweets.txt\", sep='\\t', header=T, col.names=colnames)\nedge_list_fil = edge_list[edge_list$weight > 1,]\n\nlout1 = layout.fruchterman.reingold\nlout2 = layout.kamada.kawai\n\n# igraph\n# --------------------------------------------------------------------\ng = graph.data.frame(edge_list)\nhist(degree(g))\n\n# Identify communities\ngu = as.undirected(g, mode=\"collapse\", edge.attr.comb=list(weight=\"sum\"))\ncoms = cluster_fast_greedy(gu)\ncom_sizes = sizes(coms)\nmemship = membership(coms) #coms$membership     # community id for each vertex\nV(g)$com = memship\ncoms_list = communities(coms) # list of communities by id and array for member vertices\ncross = crossing(coms, gu)\nprint(modularity(gu, memship))\n\n# Too big usually\n# plot(coms, gu, col=memship, mark.groups=coms_list, \n#      edge.color=c(\"black\", \"red\")[cross + 1], \n#      vertex.size=3, vertex.label=NA, edge.arrow.size=0)\n\n\n# Simplify\ngs = delete.vertices(g, which(degree(g) < 2)) \ngs = delete.vertices(gs, which(degree(gs) == 0)) \nV(gs)$color = as.character(lapply(as.factor(V(gs)$com), function(x) {col_pal[x]}))\nplot(gs, vertex.size=3, vertex.label=NA,\n     #edge.width=E(gs)$weight, \n     edge.arrow.size=0, edge.arrow.width=0, \n     #layout=lout1(gs, weights=E(gs)$weight))\n     layout=layout.lgl)\n\n\n# Remove vertices belonging to small communities\nhead(sort(com_sizes, decreasing=T), 20)\nmin_com_size = 200\nbig_coms = names(com_sizes[com_sizes > min_com_size])\nvert_excl = !(memship %in% big_coms)\nsum(vert_excl)\ng.lcoms = delete.vertices(g, vert_excl)\nvcount(g.lcoms)\ncol_pal = colorRampPalette(c(\"red\",\"green\"))(length(big_coms))\nV(g.lcoms)$color = as.character(lapply(as.factor(V(g.lcoms)$com), function(x) {col_pal[x]}))\nplot(g.lcoms, vertex.size=3, vertex.label=NA, vertex.color=V(g.lcoms)$color,\n     edge.width=E(g.lc)$weight, edge.arrow.size=0, edge.arrow.width=0, \n     #layout=lout1(g.lcoms, weights=E(g.lcoms)$weight))\n     layout=layout.drl)\n\n\n# Modify weights to better reflect community structure in layout\n# Not working!\ng.rw = reweight_by_community(g.lcoms, memship, 10000, 1)\ng.rw$layout = layout.fruchterman.reingold(g.rw, weights=E(g.rw)$weight)\nplot(g.rw, vertex.size=3, vertex.label=NA, vertex.color=V(g.rw)$color,\n     edge.width=1, edge.arrow.size=0, edge.arrow.width=0)\n\n\n# Draw opengl\nrgl.open()\nrgl.bg(color=\"grey\", alpha=c(.3), back=\"fill\", sphere = FALSE, fogtype = \"none\", line_antialias = TRUE)\nrgl.viewpoint(0, 0, fov=100, zoom=.5)\nrglplot(g.lcoms, vertex.size=3, vertex.label=NA, #layout=layout.kamada.kawai, \n        edge.arrow.size=0, edge.arrow.width=0, edge.width=E(g.lcoms)$weight/2, edge.color=\"white\")\n\n# Identify cliques\nlc = largest.cliques(g)\ng.lc = induced_subgraph(g, lc[[3]], impl=\"auto\")\nplot(g.lc, vertex.size=degree(g.lc)/2, vertex.label=NA, edge.width=E(g.lc)$weight,\n     edge.arrow.size=0, edge.arrow.width=0, layout=lout)\n\n# Remove nodes belonging to smallest communities\nk = 3\nvcoreness = coreness(g, mode=\"all\")\n#smallfrys = which(vcoreness < k)\n#kcore = delete.vertices(g, smallfrys)\nkcore = induced_subgraph(g, as.vector(which(vcoreness >= k)))\ncol_pal = colorRampPalette(c(\"red\",\"green\"))(length(big_coms))\nV(kcore)$color = as.character(lapply(as.factor(V(kcore)$com), function(x) {col_pal[x]}))\nplot(kcore, vertex.size=degree(kcore)/2, vertex.label=NA, edge.width=E(kcore)$weight,\n     edge.arrow.size=0, edge.arrow.width=0, layout=lout2(kcore, niter=1000))\n\n# Simplified community graph\n# Identify communities and then collapse\nc = contract.vertices(g, memship)\nc = simplify(c, edge.attr.comb=list(weight=\"sum\"))\nc = delete.vertices(c, which(degree(c) < 10)) \nhist(degree(c))\nplot(c, vertex.size=2, vertex.label=NA, edge.width=E(c)$weight)\ntkid = tkplot(c, vertex.size=2, vertex.label=NA, layout=layout.kamada.kawai)\ncanvas = tk_canvas(tkid)\ntkconfigure(canvas, \"bg\"=\"white\")\n\n#opengl\nrgl.open()\nrgl.bg(color=\"grey\", alpha=c(.3), back=\"fill\", sphere = FALSE, fogtype = \"none\", line_antialias = TRUE)\nrgl.viewpoint(0, 0, fov=100, zoom=.5)\nrglplot(c, vertex.size=degree(c)+2, vertex.label=NA, #layout=layout.kamada.kawai, \n        edge.arrow.size=0, edge.arrow.width=0, edge.width=E(c)$weight/2, edge.color=\"white\")\n\nrglplot(g, vertex.size=3, vertex.label=NA, #layout=layout.kamada.kawai, \n        edge.arrow.size=0, edge.arrow.width=0, edge.width=E(g)$weight/2, edge.color=\"white\")\n\n\ngs = graph.data.frame(edge_list_fil)\nE(gs)$weight = edge_list_fil$weight\nE(gs)$color = \"grey\"\nE(gs)[weight>5]$color = \"red\"\nplot(gs, vertex.size=2, vertex.label=NA, layout=layout.fruchterman.reingold)\ntkplot(gs, vertex.size=2, vertex.label=NA, layout=layout.fruchterman.reingold)\n\n\n# networkD3\n# --------------------------------------------------------------------\n# Conversion\nedge_list_to_dfs = function(edge_list) {\n  unique_nids = unique(c(as.character(edge_list$from), as.character(edge_list$to)))\n  src = as.numeric(factor(edge_list$from, levels=unique_nids))\n  tgt = as.numeric(factor(edge_list$to, levels=unique_nids))\n  link_df = data.frame(source=src, target=tgt, weight=edge_list$weight)\n  \n  node_ids = as.numeric(factor(unique_nids, levels=unique_nids))\n  node_df = data.frame(id=node_ids)\n  node_df$group = 1\n  return(list(\"links\"=link_df, \"nodes\"=node_df))\n}\n\n\ndfs = edge_list_to_dfs(edge_list_fil)\nig = graph.data.frame(dfs$links)\nplot(ig, vertex.size=2, vertex.label=NA)\nsimpleNetwork(edge_list_fil)\nforceNetwork(Links=dfs$links, Nodes=dfs$nodes, Source=\"source\", Target=\"target\", Value=\"weight\",\n             NodeID=\"id\", Group=\"group\", opacity=0.8)\n\n",
    "created" : 1437649946053.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "763286942",
    "id" : "58957782",
    "lastKnownWriteTime" : 1437998362,
    "path" : "~/Code/tweetonomy/R/graph.R",
    "project_path" : "graph.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}